## Project Context
A 2D platformer with environmental puzzles, made in Godot 4. Features:
- Simple platformer movement
- Avoid detection by certain level elements
- Interact in different ways to change the structure of the level
    - Need to solve an environmental puzzle to construct a valid pathway to the end
- A minigame at the end of each level
    - Need to rotate "wire nodes" the correct way to connect them, forming a path to the exit
    - Certain elements create restrictions on the path

## Code Style and Structure
- Write concise, technical GDScript code with accurate type hinting
    - Always specify function return type (except lambda functions)
- Use *String Name* and *Node Path* literals where applicable
- Use composition
- Separate responsibility between scripts
- Prefer iteration and modularization over code duplication
- Use descriptive variable names with auxiliary verbs (e.g., is_loading, has_error)
- Follow official GDScript style guide conventions

## Naming Conventions
- Use snake_case for directories/files and variable/function names in scripts
- Use CamelCase for class/node names
- Prefix Godot functions (e.g., _process, _physics_process) and signal handlers (e.g., _on_Player_body_entered) with an underscore
    - No prefix for own functions (e.g. handle_something)
- Use type hints

## Error Handling
- Implement proper error boundaries
- Log errors appropriately for debugging
- Provide user-friendly error messages

## Git Usage
Commit Message Prefixes:
- "fix:" for bug fixes
- "feat:" for new features
- "perf:" for performance improvements
- "docs:" for documentation changes
- "style:" for formatting changes
- "refactor:" for code refactoring
- "chore:" for maintenance tasks

Rules:
- Use lowercase for commit messages
- Keep the summary line concise
- Include description for non-obvious changes

## Documentation
- Document code architecture
- Don't include comments unless it's for complex logic

## Development Workflow
- Use proper version control
- Implement proper code review process
